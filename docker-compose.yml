version: "3"
services:
  server:
    container_name: server
    build:
      context: .
      dockerfile: ./Dockerfiles/server.Dockerfile
      args:
        adm_path: ${ADM_PATH}
        game_path: ${GAME_PATH}
        db_path: ${DB_PATH}
    command: "npm run server"
    working_dir: /home/node/app/backend
    networks:
      webdb:
        ipv4_address: 172.16.10.2
    environment:
      NODE_ENV: ${NODE_ENV}
      PORT: ${PORT}
      PASSWORD: ${PASSWORD}
      ADM_PATH: ${ADM_PATH}
      GAME_PATH: ${GAME_PATH}
      DB_PATH: ${DB_PATH}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_NAME: ${DB_NAME}
      DB_HOST: ${DB_HOST}
      DB_PORT: ${DB_PORT}
    expose:
      - "${PORT}"
    ports:
      - "${PORT}:${PORT}"
    depends_on:
      db:
        condition: service_healthy
    links:
      - db
    restart: always
    volumes:
      - ./backend/placeImgs:/home/node/app/backend/placeImgs
  db:
    build:
      context: .
      dockerfile: ./Dockerfiles/db.Dockerfile
    expose:
      - "${DB_PORT}"
    container_name: postgres
    restart: always
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_PORT: ${DB_PORT}
    networks:
      webdb:
        ipv4_address: ${DB_HOST}
    volumes:
      - ./data:/var/lib/postgresql/data
    healthcheck:
        test: ["CMD-SHELL", "pg_isready -d ${DB_NAME} -U ${DB_USER}"]
        interval: 10s
        timeout: 10s
        retries: 10

networks:
  webdb:
    ipam:
      driver: default
      config:
        - subnet: 172.16.10.0/24
